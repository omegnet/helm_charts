name: Release Charts

on:
  push:
    branches:
      - workflow

jobs:
  update-helm-charts:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install Helm
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod +x get_helm.sh
          ./get_helm.sh

      # Step 3: Add Helm Repositories
      - name: Add Helm Repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add curiedfcharts https://curie-data-factory.github.io/helm-charts
          helm repo add metallb https://metallb.github.io/metallb
          helm repo add longhorn https://charts.longhorn.io
          helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
          helm repo update

      # Step 4: Upgrade Charts to Specified Versions
      - name: Upgrade Charts to Specified Versions
        run: |
          set -e
          echo "Reading specified chart versions..."
          CONFIG_FILE="./chart-versions.yaml"

          # Ensure the configuration file exists
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Configuration file $CONFIG_FILE not found! Exiting..."
            exit 1
          fi

          # Parse and process each chart
          while read -r CHART_NAME DESIRED_VERSION; do
            echo "Processing chart: $CHART_NAME"
            echo "Upgrading to version: $DESIRED_VERSION"

            # Validate if the version exists
            if ! helm search repo "$CHART_NAME" --devel | grep -q "$DESIRED_VERSION"; then
              echo "Version $DESIRED_VERSION for $CHART_NAME not found in the Helm repository. Skipping..."
              continue
            fi

            # Update the chart in the repository
            CHART_PATH="./charts/$CHART_NAME"
            helm pull "$CHART_NAME" --version "$DESIRED_VERSION" --untar -d "$CHART_PATH"
            sed -i "s/^version:.*/version: $DESIRED_VERSION/" "$CHART_PATH/Chart.yaml"

          done < <(awk '/^charts:/ {flag=1; next} /^  - / && flag {print $2,$3}' "$CONFIG_FILE")

      # Step 5: Process each chart release
      - name: Process each chart release
        run: |
          set -e  # Exit on any error
          for CHART in $(awk '/^charts:/ {flag=1; next} /^  - / && flag {print $2}' "$CONFIG_FILE"); do
            echo "Processing $CHART..."

            # Check if the release exists
            RELEASE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/releases/tags/$CHART)

            if echo "$RELEASE" | grep -q '"id":'; then
              echo "Release $CHART already exists. Skipping..."
              continue
            fi

            # Check if the chart has been updated
            if git diff --name-only HEAD^ HEAD | grep -q "charts/$CHART"; then
              echo "Chart $CHART has been updated. Creating release..."
              helm package "./charts/$CHART"
              helm repo index . --url https://github.com/${{ github.repository }}/releases

              # Create a new GitHub release
              TAG_NAME="$CHART"  # Use the chart name as the tag
              echo "Creating release for $TAG_NAME..."
              curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/repos/${{ github.repository }}/releases \
                -d '{
                  "tag_name": "'"$TAG_NAME"'",
                  "name": "'"$TAG_NAME"'",
                  "body": "Automated release for '"$CHART"'",
                  "draft": false,
                  "prerelease": false
                }'
            else
              echo "No changes detected for $CHART. Skipping release creation."
            fi
          done
