name: Release Charts

on:
  push:
    branches:
      - workflow

jobs:
  update-helm-charts:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      # Step 2: Install Helm
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod +x get_helm.sh
          ./get_helm.sh

      # Step 3: Add Helm Repositories
      - name: Add Helm Repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add curiedfcharts https://curie-data-factory.github.io/helm-charts
          helm repo add metallb https://metallb.github.io/metallb
          helm repo add longhorn https://charts.longhorn.io
          helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
          helm repo update

      # Step 4: Upgrade Charts to Specified Versions
      - name: Upgrade Charts to Specified Versions
        run: |
          set -e
          # Specify chart versions
          echo "Reading specified chart versions..."
          CONFIG_FILE="./chart-versions.yaml"

          # Ensure the configuration file exists
          if [ ! -f "$CONFIG_FILE" ]; then
              echo "Configuration file $CONFIG_FILE not found! Exiting..."
              exit 1
          fi

          # Read the chart_versions.yaml file using yq
          CHARTS=$(yq -r '.charts[] | .chart + " " + .version' "$CONFIG_FILE")
          
          # Create the packages directory if it doesn't exist
          mkdir -p packages

          # Loop through each chart and process it
          while IFS= read -r CHART_VERSION; do
              CHART=$(echo "$CHART_VERSION" | awk '{print $1}')  # Chart name
              VERSION=$(echo "$CHART_VERSION" | awk '{print $2}')  # Desired version

              echo "Processing chart: $CHART"
              echo "Upgrading to version: $VERSION"

              # Check if the specified version exists
              if helm show chart "$CHART" --version "$VERSION" >/dev/null 2>&1; then
                  echo "Version $VERSION for $CHART found. Proceeding..."
                  helm pull "$CHART" --version "$VERSION" --destination ./packages
                  # helm package "./charts/$CHART"
                  # helm repo index . --url https://github.com/${{ github.repository }}/releases
                  #helm repo index ./packages --merge ./packages/index.yaml
              else
                  echo "Version $VERSION for $CHART not found. Skipping..."
                  continue
              fi
          done <<< "$CHARTS"
      

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          skip_existing: true
          packages_with_index: true
          charts_dir: packages
          # config: cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      # # Step 5: Commit changes in a new branch
      # - name: Create a new branch and commit changes
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     git config --local user.name "GitHub Actions Bot"
      #     git config --local user.email "actions@github.com"
      #     git checkout -b update-helm-charts-$(date +'%Y%m%d')
      #     git add .
      #     if git diff --cached --quiet; then
      #       echo "No changes to commit"
      #     else
      #       git commit -m "Update Helm charts and index.html"
      #     fi

      # # Step 6: Push the new branch to the repository
      # - name: Push changes to new branch
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     git push origin HEAD

      # # Step 5: Process each chart release
      # - name: Process each chart release
      #   run: |
      #     set -e  # Exit on any error
      #     for CHART in $(awk '/^charts:/ {flag=1; next} /^  - / && flag {print $2}' "$CONFIG_FILE"); do
      #       echo "Processing $CHART..."

      #       # Check if the release exists
      #       RELEASE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #         -H "Accept: application/vnd.github+json" \
      #         https://api.github.com/repos/${{ github.repository }}/releases/tags/$CHART)

      #       if echo "$RELEASE" | grep -q '"id":'; then
      #         echo "Release $CHART already exists. Skipping..."
      #         continue
      #       fi

      #       # Check if the chart has been updated
      #       if git diff --name-only HEAD^ HEAD | grep -q "charts/$CHART"; then
      #         echo "Chart $CHART has been updated. Creating release..."
      #         helm package "./charts/$CHART"
      #         helm repo index . --url https://github.com/${{ github.repository }}/releases

      #         # Create a new GitHub release
      #         TAG_NAME="$CHART"  # Use the chart name as the tag
      #         echo "Creating release for $TAG_NAME..."
      #         curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #           -H "Accept: application/vnd.github+json" \
      #           https://api.github.com/repos/${{ github.repository }}/releases \
      #           -d '{
      #             "tag_name": "'"$TAG_NAME"'",
      #             "name": "'"$TAG_NAME"'",
      #             "body": "Automated release for '"$CHART"'",
      #             "draft": false,
      #             "prerelease": false
      #           }'
      #       else
      #         echo "No changes detected for $CHART. Skipping release creation."
      #       fi
      #     done
