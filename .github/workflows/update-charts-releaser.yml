name: Update and Release Helm Charts

on:
  push:
    branches:
      - workflow

jobs:
  update-helm-charts:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install Helm
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod +x get_helm.sh
          ./get_helm.sh

      # Step 3: Add and update public Helm repositories
      - name: Add and Update Helm Repos
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add metallb https://metallb.github.io/metallb
          helm repo add longhorn https://charts.longhorn.io
          helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
          helm repo update

      # Step 4: Sync local charts with public repositories
      - name: Sync and Update Local Charts
        run: |
          set -e
          for CHART_PATH in $(find ./charts -type f -name "Chart.yaml" -exec dirname {} \;); do
            CHART_NAME=$(basename $CHART_PATH)
            echo "Processing chart: $CHART_NAME"

            # Fetch current and latest versions
            CURRENT_VERSION=$(grep "^version:" "$CHART_PATH/Chart.yaml" | awk '{print $2}')
            LATEST_VERSION=$(helm search repo $CHART_NAME --devel | grep "$CHART_NAME" | awk 'NR==1 {print $2}')
            
            echo "Current version: $CURRENT_VERSION"
            echo "Latest version: $LATEST_VERSION"

            # Check if update is required
            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
              echo "Updating $CHART_NAME to $LATEST_VERSION..."
              helm pull $CHART_NAME --version $LATEST_VERSION --untar -d $CHART_PATH
              sed -i "s/^version:.*/version: $LATEST_VERSION/" "$CHART_PATH/Chart.yaml"
            else
              echo "$CHART_NAME is already up to date. Skipping."
            fi
          done

      # Step 5: Commit changes if any
      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "GitHub Actions Bot"
          git config --local user.email "actions@github.com"
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Automated update of Helm charts"
            git push origin workflow
          fi

  release:
    needs: update-helm-charts
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Configure Git
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      # Step 3: Release updated charts
      - name: Process and Release Charts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          for CHART_PATH in $(find ./charts -type f -name "Chart.yaml" -exec dirname {} \;); do
            CHART_NAME=$(basename $CHART_PATH)
            CURRENT_VERSION=$(grep "^version:" "$CHART_PATH/Chart.yaml" | awk '{print $2}')
            TAG_NAME="${CHART_NAME}-${CURRENT_VERSION}"

            # Check if the release exists
            RELEASE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME)

            if echo "$RELEASE" | grep -q '"id":'; then
              echo "Release $TAG_NAME already exists. Skipping..."
              continue
            fi

            # Package and index the chart
            echo "Packaging and indexing $CHART_NAME..."
            helm package $CHART_PATH
            helm repo index . --url https://github.com/${{ github.repository }}/releases

            # Create a new GitHub release
            echo "Creating release for $TAG_NAME..."
            curl -s -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/releases \
              -d '{
                "tag_name": "'"$TAG_NAME"'",
                "name": "'"$TAG_NAME"'",
                "body": "Automated release for '"$CHART_NAME"' version '"$CURRENT_VERSION"'",
                "draft": false,
                "prerelease": false
              }'
          done
