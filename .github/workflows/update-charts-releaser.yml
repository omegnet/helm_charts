name: Update and Release Helm Charts with Specified Versions

on:
  push:
    branches:
      - workflow

jobs:
  update-and-release:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Install Helm
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod +x get_helm.sh
          ./get_helm.sh

      # Step 3: Add Helm Repositories
      - name: Add Helm Repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add sonatype https://sonatype.github.io/helm3-charts/
          helm repo update

      # Step 4: Specify Versions and Upgrade Charts
      - name: Upgrade Charts to Specified Versions
        run: |
          set -e
          echo "Reading specified chart versions..."
          CONFIG_FILE="./chart-versions.yaml"

          # Ensure the configuration file exists
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Configuration file $CONFIG_FILE not found! Exiting..."
            exit 1
          fi

          # Parse and process each chart
          while read -r CHART_NAME DESIRED_VERSION; do
            echo "Processing chart: $CHART_NAME"
            echo "Upgrading to version: $DESIRED_VERSION"

            # Validate if the version exists
            VALID_VERSION=$(helm search repo $CHART_NAME --devel | awk -v version="$DESIRED_VERSION" '$2 == version {print $2}')
            if [ -z "$VALID_VERSION" ]; then
              echo "Version $DESIRED_VERSION for $CHART_NAME not found in the Helm repository. Skipping..."
              continue
            fi

            echo "Valid version $VALID_VERSION found for $CHART_NAME."

            # Update the chart in the repository
            CHART_PATH="./charts/$CHART_NAME"
            helm pull $CHART_NAME --version $DESIRED_VERSION --untar -d $CHART_PATH
            sed -i "s/^version:.*/version: $DESIRED_VERSION/" "$CHART_PATH/Chart.yaml"

          done < <(awk '/^charts:/ {flag=1; next} /^  - / && flag {print $2,$3}' "$CONFIG_FILE")

      # Step 5: Commit Changes if Any
      - name: Commit Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "GitHub Actions Bot"
          git config --local user.email "actions@github.com"
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Automated update of specified Helm charts"
            git push origin workflow

      # Step 6: Create GitHub Releases for Updated Charts
      - name: Create GitHub Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          for CHART_PATH in $(find ./charts -type f -name "Chart.yaml" -exec dirname {} \;); do
            CHART_NAME=$(basename $CHART_PATH)
            CURRENT_VERSION=$(grep "^version:" "$CHART_PATH/Chart.yaml" | awk '{print $2}')
            TAG_NAME="${CHART_NAME}-${CURRENT_VERSION}"

            # Check if the release exists
            RELEASE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME)

            if echo "$RELEASE" | grep -q '"id":'; then
              echo "Release $TAG_NAME already exists. Skipping..."
              continue
            fi

            # Package and index the chart
            echo "Packaging and indexing $CHART_NAME..."
            helm package $CHART_PATH
            helm repo index . --url https://github.com/${{ github.repository }}/releases

            # Create a new GitHub release
            echo "Creating release for $TAG_NAME..."
            curl -s -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/releases \
              -d '{
                "tag_name": "'"$TAG_NAME"'",
                "name": "'"$TAG_NAME"'",
                "body": "Automated release for '"$CHART_NAME"' version '"$CURRENT_VERSION"'",
                "draft": false,
                "prerelease": false
              }'
          done
