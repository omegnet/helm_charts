name: Release Charts

on:
  push:
    branches:
      - workflow

jobs:
  update-helm-charts:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install Helm
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod +x get_helm.sh
          ./get_helm.sh

      # Step 3: Update Helm dependencies
      - name: Update Helm dependencies
        run: |
          for dir in $(find . -type f -name "Chart.yaml" -exec dirname {} \;); do
            echo "Updating dependencies for $dir"
            helm dependency update $dir || echo "No dependencies to update for $dir"
          done

      # Step 4: Lint and validate Helm charts
      - name: Lint and validate Helm charts
        run: |
          for dir in $(find . -type f -name "Chart.yaml" -exec dirname {} \;); do
            helm lint $dir || exit 1
          done

      # Step 5: Commit changes if any
      - name: Commit changes
        run: |
          git config --local user.name "GitHub Actions Bot"
          git config --local user.email "actions@github.com"
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Automated update of Helm chart dependencies"
          fi

      # Step 6: Push changes back to the repository
      - name: Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push

  release:
    needs: update-helm-charts  # Ensure this job runs after the update job
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Configure Git
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      # Step 3: Get Chart Versions
      - name: Get Chart Versions
        run: |
          CHART_LIST=$(ls charts | tr '\n' ',')
          echo "chart_list=$CHART_LIST" >> "$GITHUB_ENV"

      # Step 4: Validate Helm Charts
      - name: Validate Helm Charts
        run: |
          IFS=',' read -ra CHARTS <<< "$chart_list"  # Use $chart_list instead of ${{ env.chart_list }}
          for CHART in "${CHARTS[@]}"; do
              echo "Linting chart $CHART..."
              helm lint ./charts/$CHART || exit 1
          done

      # Step 5: Loop through each chart version
      - name: Process each chart release
        run: |
          set -e  # Exit on any error
          IFS=',' read -ra CHARTS <<< "${{ env.chart_list }}"  # Split the chart_list into an array
          for CHART in "${CHARTS[@]}"; do
            echo "Processing $CHART..."

            # Check if the release exists
            RELEASE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/releases/tags/$CHART)

            if echo "$RELEASE" | grep -q '"id":'; then
              echo "Release $CHART already exists. Skipping..."
              continue
            fi

            # Run chart-releaser for new release
            helm package ./charts/$CHART
            helm repo index . --url https://github.com/${{ github.repository }}/releases

            # Create GitHub Release
            echo "Creating release for $CHART..."
            curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/releases \
              -d '{
                "tag_name": "'"$CHART"'",
                "name": "'"$CHART"'",
                "body": "Automated release for '"$CHART"'",
                "draft": false,
                "prerelease": false
              }'
          done
