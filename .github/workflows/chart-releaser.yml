name: Update Helm Charts

on:
  workflow_dispatch: # Trigger manually or schedule
  push:
    branches:
      - main
    paths:
      - 'charts/**' 

jobs:
  update-charts:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.5.4
      
      - name: Add dependency repositories
        run: |
          # Read repository URLs from a file
            while IFS= read -r REPO; do
                helm repo add $REPO
            done < ./helm-repos.txt

            helm repo update
  
      # - name: Install chart-releaser
      #   run: |
      #     mkdir -p ~/chart-releaser
      #     curl -LO https://github.com/helm/chart-releaser/releases/download/v1.7.0/chart-releaser_1.7.0_linux_amd64.tar.gz
      #     tar -xf chart-releaser_1.7.0_linux_amd64.tar.gz -C ~/chart-releaser
      #     echo "PATH=$PATH:~/chart-releaser" >> $GITHUB_ENV

      - name: Update charts based on chart-versions.yaml
        run: |
          set -e
          echo "Reading specified chart versions..."
          CONFIG_FILE="./chart-versions.yaml"
          PACKAGES_DIR="./packages"
          REPO_URL="https://omegnet.github.io/helm_charts/"

          # Ensure the configuration file exists
          if [ ! -f "$CONFIG_FILE" ]; then
              echo "Configuration file $CONFIG_FILE not found! Exiting..."
              exit 1
          fi

          # Read the chart_versions.yaml file using yq
          CHARTS=$(yq -r '.charts[] | .chart + " " + .version + " " + .appVersion' "$CONFIG_FILE")
          
          # Create the packages directory if it doesn't exist
          mkdir -p $PACKAGES_DIR

          # Loop through each chart and process it
          while IFS= read -r CHART_VERSION; do
              CHART=$(echo "$CHART_VERSION" | awk '{print $1}')  # Chart name
              VERSION=$(echo "$CHART_VERSION" | awk '{print $2}')  # Desired version
              APP_VERSION=$(echo "$CHART_VERSION" | awk '{print $3}')  # Desired app version
              CHART_NAME=$(echo "$CHART_VERSION" | awk '{print $1}' |awk -F '/' '{print $2}')
              CURRENT_APP_VERSION=$(grep "^appVersion:" "./charts/$CHART_NAME/Chart.yaml" | awk '{print $2}')

              echo "Processing chart: $CHART"
              echo "Upgrading to version: $VERSION"
              if [ -n "$VERSION" ]; then
                  echo "Upgrading Chart Version to: $VERSION"
                  sed -i "s/^version:.*/version: $VERSION/" ./charts/$CHART_NAME/Chart.yaml
              fi

              if [ -n "$APP_VERSION" ]; then
                  if [ "$APP_VERSION" != "$CURRENT_APP_VERSION" ]; then
                      echo "Upgrading appVersion to: $APP_VERSION"
                      sed -i "s/^appVersion:.*/appVersion: $APP_VERSION/" ./charts/$CHART_NAME/Chart.yaml
                  fi
              fi
      
          done <<< "$CHARTS"

      - name: Package Helm charts
        run: |
          helm package ./charts/* -d packages
      
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: charts
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_SKIP_EXISTING: true
          
      # - name: Create new branch
      #   id: create_branch
      #   run: |
      #     branch_name="update-charts-$(date +%s)"
      #     git checkout -b $branch_name
      #     echo "branch_name=$branch_name" >> $GITHUB_ENV

      # - name: Commit and push changes to new branch
      #   run: |
      #     git config --global user.name "github-actions[bot]"
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git add .
      #     git commit -m "Update Helm charts"
      #     git push origin ${{ env.branch_name }}

      # - name: Checkout gh-pages branch
      #   run: |
      #     git fetch origin gh-pages
      #     git checkout gh-pages

      # - name: Create new branch from gh-pages
      #   id: create_gh_pages_branch
      #   run: |
      #     gh_pages_branch_name="update-gh-pages-$(date +%s)"
      #     git checkout -b $gh_pages_branch_name
      #     echo "gh_pages_branch_name=$gh_pages_branch_name" >> $GITHUB_ENV

      # - name: Upload packages to GitHub Releases
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     # PATH: $PATH:~/chart-releaser
      #   run: |
      #     ls -l ~/chart-releaser
      #     for chart in ./packages ; do
      #       ~/chart-releaser/cr upload --owner omegnet --git-repo helm_charts --token $GITHUB_TOKEN --package-path $chart
      #     done

      # - name: Update Helm repo index
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PATH: $PATH:~/chart-releaser
      #   run: |
      #     cr index --owner omegnet --git-repo helm_charts --token $GITHUB_TOKEN --package-path ./packages --index-path ./index.yaml


      # - name: Commit and push changes to new gh-pages branch
      #   run: |
      #     git add .
      #     git commit -m "Update Helm charts"
      #     git push origin ${{ env.gh_pages_branch_name }}

      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v3
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: ${{ env.branch_name }}
      #     title: "Update Helm charts"
      #     body: "This PR updates the Helm charts based on the latest versions."